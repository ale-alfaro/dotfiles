#compdef aerospace

_aerospace_cmd_55 () {
    aerospace list-workspaces --monitor all --empty no
}

_aerospace_cmd_53 () {
    aerospace list-windows --all --format '%{window-id}%{tab}%{app-name} - %{window-title}'
}

_aerospace_cmd_52 () {
    true
}

_aerospace_cmd_50 () {
    aerospace list-apps --format '%{app-pid}%{tab}%{app-name}'
}

_aerospace_cmd_26 () {
    aerospace config --get mode --keys | xargs -I{} aerospace config --get mode.{}.binding --keys
}

_aerospace_cmd_54 () {
    aerospace config --major-keys
}

_aerospace_cmd_39 () {
    aerospace config --get mode --keys
}

_aerospace_cmd_44 () {
    aerospace list-apps --format '%{app-bundle-id}%{tab}%{app-name}'
}

_aerospace_cmd_43 () {
    aerospace list-monitors --format '%{monitor-id}%{tab}%{monitor-name}'
}

_aerospace_subword_cmd_0 () {
    true
}

_aerospace_subword_1 () {
    local mode=$1
    local word=$2
    local completions_no_description_trailing_space_array_name=$3
    local completions_trailing_space_array_name=$4
    local suffixes_trailing_space_array_name=$5
    local descriptions_trailing_space_array_name=$6
    local completions_no_description_no_trailing_space_array_name=$7
    local completions_no_trailing_space_array_name=$8
    local suffixes_no_trailing_space_array_name=$9
    local descriptions_no_trailing_space_array_name=${10}

    local -a literals=("-" "+")

    local -A descriptions

    local -A literal_transitions
    literal_transitions[1]="([1]=2 [2]=2)"

    local -A match_anything_transitions
    match_anything_transitions=([1]=3 [2]=3)

    local state=1
    local char_index=0
    local matched=0
    while true; do
        if [[ $char_index -ge ${#word} ]]; then
            matched=1
            break
        fi

        local subword=${word:$char_index}

        if [[ -v "literal_transitions[$state]" ]]; then
            declare -A state_transitions
            eval "state_transitions=${literal_transitions[$state]}"

            local literal_matched=0
            for ((literal_id = 1; literal_id <= $#literals; literal_id++)); do
                local literal=${literals[$literal_id]}
                local literal_len=${#literal}
                if [[ ${subword:0:$literal_len} = "$literal" ]]; then
                    if [[ -v "state_transitions[$literal_id]" ]]; then
                        state=${state_transitions[$literal_id]}
                        char_index=$((char_index + literal_len))
                        literal_matched=1
                    fi
                fi
            done
            if [[ $literal_matched -ne 0 ]]; then
                continue
            fi
        fi

        if [[ -v "match_anything_transitions[$state]" ]]; then
            state=${match_anything_transitions[$state]}
            matched=1
            break
        fi

        break
    done

    if [[ $mode = matches ]]; then
        return $((1 - matched))
    fi

    local matched_prefix="${word:0:$char_index}"
    local completed_prefix="${word:$char_index}"

    if [[ -v "literal_transitions[$state]" ]]; then
        declare -A state_transitions
        eval "state_transitions=${literal_transitions[$state]}"

        for literal_id in ${(k)state_transitions}; do
            local literal=${literals[$literal_id]}
            if [[ $literal = "${completed_prefix}"* ]]; then
                local completion="$matched_prefix$literal"
                local to_state=${state_transitions[$literal_id]}
                if [[ -v "literal_transitions[$to_state]" || -v "match_anything_transitions[$to_state]" ]]; then
                    if [[ -v "descriptions[$literal_id]" ]]; then
                        eval "$completions_no_trailing_space_array_name+=(${(qq)completion})"
                        eval "$suffixes_no_trailing_space_array_name+=(${(qq)completion})"
                        eval "$descriptions_no_trailing_space_array_name+=(${(qq)descriptions[$literal_id]})"
                    else
                        eval "$completions_no_trailing_space_array_name+=(${(qq)completion})"
                        eval "$suffixes_no_trailing_space_array_name+=(${(qq)literal})"
                        eval "$descriptions_no_trailing_space_array_name+=('')"
                    fi
                else
                    if [[ -v "descriptions[$literal_id]" ]]; then
                        eval "$completions_trailing_space_array_name+=(${(qq)completion})"
                        eval "$suffixes_trailing_space_array_name+=(${(qq)completion})"
                        eval "$descriptions_trailing_space_array_name+=(${(qq)descriptions[$literal_id]})"
                    else
                        eval "$completions_trailing_space_array_name+=(${(qq)completion})"
                        eval "$suffixes_trailing_space_array_name+=(${(qq)literal})"
                        eval "$descriptions_trailing_space_array_name+=('')"
                    fi
                fi
            fi
        done
    fi
    local -A commands=([1]=0 [2]=0)

    if [[ -v "commands[$state]" ]]; then
        local command_id=${commands[$state]}
        local output=$(_aerospace_subword_cmd_${command_id} "$matched_prefix")
        local -a command_completions=("${(@f)output}")
        for line in ${command_completions[@]}; do
            if [[ $line = "${completed_prefix}"* ]]; then
                local parts=(${(@s:	:)line})
                if [[ -v "parts[2]" ]]; then
                    local completion=$matched_prefix${parts[1]}
                    eval "$completions_trailing_space_array_name+=(${(qq)completion})"
                    eval "$suffixes_trailing_space_array_name+=(${(qq)parts[1]})"
                    eval "$descriptions_trailing_space_array_name+=(${(qq)parts[2]})"
                else
                    line="$matched_prefix$line"
                    eval "$completions_no_description_trailing_space_array_name+=(${(qq)line})"
                fi
            fi
        done
    fi
    return 0
}

_aerospace () {
    local -a literals=("move-mouse" "--count" "-v" "smart" "macos-native-fullscreen" "mute-toggle" "height" "toggle" "all-monitors-outer-frame" "h_accordion" "all" "--window-id" "monitor-force-center" "list-apps" "flatten-workspace-tree" "mode" "width" "summon-workspace" "focus-back-and-forth" "list-monitors" "h_tiles" "prev" "window-force-center" "trigger-binding" "-h" "move-node-to-workspace" "wrap-around-the-workspace" "enable" "--ignore-floating" "--visible" "close-all-windows-but-current" "--help" "--macos-native-hidden" "off" "move-workspace-to-monitor" "--boundaries" "set" "workspace-back-and-forth" "--quit-if-last-window" "window-lazy-center" "workspace" "--major-keys" "accordion" "--focused" "tiling" "--app-bundle-id" "--mouse" "balance-sizes" "opposite" "on" "--auto-back-and-forth" "--version" "--json" "join-with" "reload-config" "--workspace" "floating" "--swap-focus" "--mode" "--boundaries-action" "resize" "visible" "close" "up" "layout" "--fail-if-noop" "list-exec-env-vars" "fail" "--monitor" "--focus-follows-window" "split" "--pid" "mute-on" "v_tiles" "monitor-lazy-center" "--keys" "wrap-around-all-monitors" "--wrap-around" "horizontal" "create-implicit-container" "config" "--no-outer-gaps" "focused" "mute-off" "--all-keys" "--all" "left" "right" "swap" "--config-path" "--get" "--empty" "tiles" "dfs-next" "--no-gui" "smart-opposite" "--format" "list-modes" "--dry-run" "move-node-to-monitor" "dfs-prev" "move" "focus" "down" "list-workspaces" "volume" "no" "stop" "debug-windows" "macos-native-minimize" "list-windows" "mouse" "next" "--dfs-index" "fullscreen" "focus-monitor" "--current" "v_accordion" "vertical")

    local -A descriptions

    local -A literal_transitions
    literal_transitions[1]="([1]=111 [3]=3 [54]=114 [55]=115 [35]=116 [5]=62 [38]=3 [61]=86 [89]=74 [63]=65 [98]=102 [14]=73 [41]=95 [65]=117 [67]=3 [15]=5 [100]=118 [71]=119 [20]=41 [16]=93 [19]=3 [102]=35 [103]=70 [18]=112 [24]=53 [25]=3 [105]=120 [26]=121 [106]=90 [109]=52 [110]=52 [111]=14 [28]=122 [48]=5 [81]=10 [31]=76 [52]=3 [115]=123 [32]=3 [116]=77)"
    literal_transitions[4]="([97]=2 [2]=3 [53]=3)"
    literal_transitions[5]="([56]=6)"
    literal_transitions[7]="([12]=8 [66]=7)"
    literal_transitions[10]="([85]=3 [42]=3 [76]=11 [53]=11 [91]=12 [90]=3)"
    literal_transitions[11]="([53]=11 [91]=12 [76]=11)"
    literal_transitions[13]="([10]=13 [21]=13 [57]=13 [79]=13 [93]=13 [45]=13 [74]=13 [43]=13 [118]=13 [119]=13)"
    literal_transitions[14]="([72]=15 [2]=16 [56]=17 [97]=18 [44]=4 [86]=4 [46]=19 [53]=16 [69]=20)"
    literal_transitions[16]="([72]=15 [2]=80 [56]=17 [97]=81 [44]=4 [86]=4 [46]=19 [53]=80 [69]=20)"
    literal_transitions[17]="([62]=85 [83]=85)"
    literal_transitions[20]="([11]=91 [112]=91 [83]=91)"
    literal_transitions[21]="([36]=22 [60]=23 [87]=24 [88]=24 [104]=24 [29]=21 [64]=24)"
    literal_transitions[22]="([9]=21 [41]=21)"
    literal_transitions[23]="([108]=21 [27]=21 [68]=21 [77]=21)"
    literal_transitions[24]="([36]=132 [60]=43 [29]=24)"
    literal_transitions[27]="([82]=27 [66]=27 [12]=28 [50]=29)"
    literal_transitions[29]="([12]=109 [82]=29 [66]=29)"
    literal_transitions[30]="([82]=27 [66]=27 [12]=28 [34]=31 [50]=29)"
    literal_transitions[31]="([12]=9 [66]=3)"
    literal_transitions[33]="([82]=106 [66]=27 [12]=105 [34]=31 [50]=29)"
    literal_transitions[35]="([36]=71 [60]=55 [87]=47 [88]=47 [12]=34 [104]=47 [64]=47)"
    literal_transitions[37]="([12]=36 [58]=37 [78]=37)"
    literal_transitions[38]="([51]=38 [66]=38)"
    literal_transitions[39]="([51]=39 [66]=39)"
    literal_transitions[40]="([107]=41 [2]=41 [97]=42 [53]=41 [47]=40 [44]=40)"
    literal_transitions[41]="([2]=41 [97]=42 [53]=41 [47]=40 [44]=40)"
    literal_transitions[43]="([108]=24 [27]=24 [68]=24 [77]=24)"
    literal_transitions[45]="([75]=46 [40]=46 [13]=46 [23]=46)"
    literal_transitions[46]="([66]=3)"
    literal_transitions[47]="([12]=48 [36]=49 [60]=50)"
    literal_transitions[49]="([9]=47 [41]=47)"
    literal_transitions[50]="([68]=47 [80]=47 [108]=47)"
    literal_transitions[51]="([79]=52 [119]=52 [49]=52)"
    literal_transitions[52]="([12]=9)"
    literal_transitions[53]="([59]=25)"
    literal_transitions[54]="([59]=93)"
    literal_transitions[55]="([68]=35 [80]=35 [108]=35)"
    literal_transitions[57]="([12]=56 [66]=57 [70]=57)"
    literal_transitions[58]="([108]=59 [27]=59 [68]=59 [77]=59)"
    literal_transitions[59]="([104]=24 [94]=60 [29]=59 [64]=24 [36]=22 [60]=58 [87]=24 [88]=24 [101]=60)"
    literal_transitions[60]="([60]=61 [29]=60)"
    literal_transitions[61]="([108]=60 [27]=60 [68]=60 [77]=60)"
    literal_transitions[62]="([66]=62 [12]=63 [34]=7 [50]=7)"
    literal_transitions[64]="([10]=13 [21]=13 [57]=13 [79]=13 [93]=13 [45]=13 [74]=13 [43]=13 [118]=13 [119]=13)"
    literal_transitions[65]="([12]=66 [39]=65)"
    literal_transitions[67]="([113]=68 [12]=69 [22]=68 [104]=68 [64]=68 [87]=68 [88]=68 [66]=67 [78]=67 [70]=67)"
    literal_transitions[68]="([66]=68 [12]=92 [78]=68 [70]=68)"
    literal_transitions[70]="([12]=9 [94]=60 [29]=59 [64]=24 [36]=22 [60]=58 [87]=24 [88]=24 [104]=24 [114]=2 [101]=60)"
    literal_transitions[71]="([9]=35 [41]=35)"
    literal_transitions[73]="([2]=73 [97]=72 [53]=73 [33]=84)"
    literal_transitions[74]="([104]=37 [12]=75 [94]=37 [58]=74 [64]=37 [87]=37 [88]=37 [78]=74 [101]=37)"
    literal_transitions[76]="([39]=3)"
    literal_transitions[77]="([113]=78 [104]=78 [22]=78 [64]=78 [87]=78 [88]=78 [78]=79)"
    literal_transitions[78]="([78]=3)"
    literal_transitions[79]="([87]=78 [88]=78 [113]=78 [104]=78 [22]=78 [64]=78)"
    literal_transitions[80]="([72]=15 [2]=80 [46]=19 [56]=17 [53]=80 [69]=20 [97]=81)"
    literal_transitions[83]="([30]=107 [2]=83 [92]=107 [97]=82 [53]=83 [69]=103)"
    literal_transitions[84]="([107]=73 [2]=73 [97]=72 [53]=73 [33]=84)"
    literal_transitions[85]="([72]=15 [2]=80 [62]=85 [56]=17 [97]=81 [46]=19 [53]=80 [83]=85 [69]=20)"
    literal_transitions[86]="([17]=87 [4]=87 [7]=87 [12]=88 [96]=87)"
    literal_transitions[89]="([78]=89 [70]=89)"
    literal_transitions[90]="([64]=3 [37]=2 [6]=3 [73]=3 [104]=3 [84]=3)"
    literal_transitions[91]="([11]=91 [2]=80 [72]=15 [112]=91 [56]=17 [97]=81 [83]=91 [46]=19 [53]=80 [69]=20)"
    literal_transitions[95]="([51]=38 [113]=78 [66]=38 [22]=78 [78]=96)"
    literal_transitions[96]="([22]=78 [113]=78)"
    literal_transitions[97]="([17]=87 [4]=87 [7]=87 [96]=87)"
    literal_transitions[99]="([30]=108 [2]=99 [92]=108 [97]=98 [53]=99)"
    literal_transitions[101]="([87]=3 [88]=3 [104]=3 [64]=3)"
    literal_transitions[102]="([117]=102 [2]=102 [53]=102)"
    literal_transitions[103]="([11]=104 [112]=104 [83]=104)"
    literal_transitions[104]="([11]=104 [2]=99 [112]=104 [92]=108 [97]=98 [30]=108 [53]=99 [83]=104)"
    literal_transitions[106]="([82]=106 [66]=27 [12]=105 [50]=29)"
    literal_transitions[107]="([30]=107 [2]=83 [107]=83 [92]=107 [97]=82 [53]=83 [69]=103)"
    literal_transitions[108]="([30]=108 [2]=99 [107]=99 [92]=108 [97]=98 [53]=99)"
    literal_transitions[110]="([113]=89 [22]=89 [78]=110 [70]=110)"
    literal_transitions[111]="([66]=45 [40]=46 [13]=46 [23]=46 [75]=46)"
    literal_transitions[112]="([66]=113)"
    literal_transitions[114]="([87]=3 [88]=3 [12]=100 [104]=3 [64]=3)"
    literal_transitions[115]="([95]=115 [99]=115)"
    literal_transitions[116]="([113]=78 [104]=78 [22]=78 [64]=78 [87]=78 [88]=78 [78]=133)"
    literal_transitions[117]="([10]=13 [93]=13 [12]=126 [21]=13 [57]=13 [79]=13 [45]=13 [74]=13 [43]=13 [118]=13 [119]=13)"
    literal_transitions[118]="([113]=68 [12]=127 [22]=68 [104]=68 [64]=68 [87]=68 [88]=68 [66]=118 [78]=67 [70]=118)"
    literal_transitions[119]="([49]=52 [12]=94 [79]=52 [119]=52)"
    literal_transitions[120]="([2]=129 [92]=107 [97]=134 [44]=4 [30]=107 [86]=4 [53]=129 [69]=103)"
    literal_transitions[121]="([70]=121 [66]=124 [113]=89 [12]=125 [78]=110 [22]=89)"
    literal_transitions[122]="([66]=135 [34]=46 [8]=3 [50]=46)"
    literal_transitions[123]="([82]=106 [66]=30 [12]=32 [34]=31 [50]=29)"
    literal_transitions[124]="([66]=124 [12]=125 [70]=124)"
    literal_transitions[128]="([53]=128 [76]=128)"
    literal_transitions[129]="([2]=83 [92]=107 [97]=82 [44]=4 [30]=107 [86]=4 [53]=83 [69]=103)"
    literal_transitions[130]="([66]=57 [12]=56 [70]=57)"
    literal_transitions[131]="([78]=3)"
    literal_transitions[132]="([9]=24 [41]=24)"
    literal_transitions[133]="([87]=78 [88]=78 [104]=78 [22]=78 [113]=78 [64]=78)"
    literal_transitions[135]="([34]=46 [50]=46)"

    local -A match_anything_transitions
    match_anything_transitions=([112]=46 [48]=47 [34]=35 [131]=131 [125]=124 [127]=118 [44]=44 [66]=65 [88]=97 [133]=131 [85]=85 [105]=106 [82]=83 [25]=26 [36]=37 [20]=91 [6]=3 [56]=57 [63]=62 [94]=51 [69]=67 [28]=27 [103]=104 [118]=130 [38]=39 [26]=3 [53]=54 [95]=39 [109]=29 [124]=57 [9]=3 [77]=44 [2]=3 [116]=131 [126]=64 [91]=91 [42]=41 [72]=73 [92]=68 [93]=3 [130]=130 [100]=101 [18]=16 [104]=104 [19]=80 [81]=80 [32]=33 [98]=99 [113]=46 [121]=57 [15]=80 [75]=74 [134]=129 [8]=7 [12]=128 [17]=85)

    declare -A subword_transitions
    subword_transitions[87]="([1]=52)"

    local state=1
    local word_index=2
    while [[ $word_index -lt $CURRENT ]]; do
        if [[ -v "literal_transitions[$state]" ]]; then
            local -A state_transitions
            eval "state_transitions=${literal_transitions[$state]}"

            local word=${words[$word_index]}
            local word_matched=0
            for ((literal_id = 1; literal_id <= $#literals; literal_id++)); do
                if [[ ${literals[$literal_id]} = "$word" ]]; then
                    if [[ -v "state_transitions[$literal_id]" ]]; then
                        state=${state_transitions[$literal_id]}
                        word_index=$((word_index + 1))
                        word_matched=1
                        break
                    fi
                fi
            done
            if [[ $word_matched -ne 0 ]]; then
                continue
            fi
        fi

        if [[ -v "subword_transitions[$state]" ]]; then
            declare -A state_transitions
            eval "state_transitions=${subword_transitions[$state]}"

            local subword_matched=0
            for subword_id in ${(k)state_transitions}; do
                if _aerospace_subword_"${subword_id}" matches "$word"; then
                    subword_matched=1
                    state=${state_transitions[$subword_id]}
                    word_index=$((word_index + 1))
                    break
                fi
            done
            if [[ $subword_matched -ne 0 ]]; then
                continue
            fi
        fi

        if [[ -v "match_anything_transitions[$state]" ]]; then
            state=${match_anything_transitions[$state]}
            word_index=$((word_index + 1))
            continue
        fi

        return 1
    done

    completions_no_description_trailing_space=()
    completions_no_description_no_trailing_space=()
    completions_trailing_space=()
    suffixes_trailing_space=()
    descriptions_trailing_space=()
    completions_no_trailing_space=()
    suffixes_no_trailing_space=()
    descriptions_no_trailing_space=()

    if [[ -v "literal_transitions[$state]" ]]; then
        local -A state_transitions
        eval "state_transitions=${literal_transitions[$state]}"

        for literal_id in ${(k)state_transitions}; do
            if [[ -v "descriptions[$literal_id]" ]]; then
                completions_trailing_space+=("${literals[$literal_id]}")
                suffixes_trailing_space+=("${literals[$literal_id]}")
                descriptions_trailing_space+=("${descriptions[$literal_id]}")
            else
                completions_no_description_trailing_space+=("${literals[$literal_id]}")
            fi
        done
    fi

    if [[ -v "subword_transitions[$state]" ]]; then
        declare -A state_transitions
        eval "state_transitions=${subword_transitions[$state]}"

        for subword_id in ${(k)state_transitions}; do
            _aerospace_subword_${subword_id} complete "${words[$CURRENT]}" completions_no_description_trailing_space completions_trailing_space suffixes_trailing_space descriptions_trailing_space completions_no_description_no_trailing_space completions_no_trailing_space suffixes_no_trailing_space descriptions_no_trailing_space
        done
    fi
    local -A commands=([93]=39 [85]=55 [130]=52 [112]=55 [26]=26 [109]=53 [53]=26 [95]=55 [105]=53 [124]=55 [48]=53 [34]=53 [100]=53 [18]=52 [104]=43 [19]=44 [81]=52 [131]=52 [82]=52 [25]=39 [9]=53 [32]=53 [98]=52 [113]=55 [121]=55 [36]=53 [77]=52 [125]=53 [127]=53 [2]=52 [116]=52 [15]=50 [75]=53 [44]=52 [134]=52 [20]=43 [6]=55 [8]=53 [126]=53 [66]=53 [56]=53 [88]=53 [63]=53 [94]=53 [91]=43 [42]=52 [12]=54 [69]=53 [28]=53 [72]=52 [103]=43 [118]=52 [38]=55 [133]=52 [92]=53 [17]=55)

    if [[ -v "commands[$state]" ]]; then
        local command_id=${commands[$state]}
        local output=$(_aerospace_cmd_${command_id} "${words[$CURRENT]}")
        local -a command_completions=("${(@f)output}")
        for line in ${command_completions[@]}; do
            local parts=(${(@s:	:)line})
            if [[ -v "parts[2]" ]]; then
                completions_trailing_space+=("${parts[1]}")
                suffixes_trailing_space+=("${parts[1]}")
                descriptions_trailing_space+=("${parts[2]}")
            else
                completions_no_description_trailing_space+=("${parts[1]}")
            fi
        done
    fi

    local maxlen=0
    for suffix in ${suffixes_trailing_space[@]}; do
        if [[ ${#suffix} -gt $maxlen ]]; then
            maxlen=${#suffix}
        fi
    done
    for suffix in ${suffixes_no_trailing_space[@]}; do
        if [[ ${#suffix} -gt $maxlen ]]; then
            maxlen=${#suffix}
        fi
    done

    for ((i = 1; i <= $#suffixes_trailing_space; i++)); do
        if [[ -z ${descriptions_trailing_space[$i]} ]]; then
            descriptions_trailing_space[$i]="${(r($maxlen)( ))${suffixes_trailing_space[$i]}}"
        else
            descriptions_trailing_space[$i]="${(r($maxlen)( ))${suffixes_trailing_space[$i]}} -- ${descriptions_trailing_space[$i]}"
        fi
    done

    for ((i = 1; i <= $#suffixes_no_trailing_space; i++)); do
        if [[ -z ${descriptions_no_trailing_space[$i]} ]]; then
            descriptions_no_trailing_space[$i]="${(r($maxlen)( ))${suffixes_no_trailing_space[$i]}}"
        else
            descriptions_no_trailing_space[$i]="${(r($maxlen)( ))${suffixes_no_trailing_space[$i]}} -- ${descriptions_no_trailing_space[$i]}"
        fi
    done

    compadd -Q -a completions_no_description_trailing_space
    compadd -Q -S ' ' -a completions_no_description_no_trailing_space
    compadd -l -Q -a -d descriptions_trailing_space completions_trailing_space
    compadd -l -Q -S '' -a -d descriptions_no_trailing_space completions_no_trailing_space
    return 0
}

if [[ $ZSH_EVAL_CONTEXT =~ :file$ ]]; then
    compdef _aerospace aerospace
else
    _aerospace
fi
